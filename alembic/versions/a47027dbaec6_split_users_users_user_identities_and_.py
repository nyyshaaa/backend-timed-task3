"""split users → users + creds and migrate data

Revision ID: a47027dbaec6
Revises: 
Create Date: 2025-07-25 21:40:32.496479

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel


# revision identifiers, used by Alembic.
revision: str = 'a47027dbaec6'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # 1) Add a new nullable integer column "id"
    op.add_column('users', sa.Column('id', sa.Integer(), nullable=True))

    # 2) Back‑fill "id" for existing rows using row_number()
    op.execute(sa.text("""
        WITH numbered AS (
          SELECT spotify_id,
                 ROW_NUMBER() OVER (ORDER BY spotify_id) AS rn
          FROM users
        )
        UPDATE users u
        SET id = n.rn
        FROM numbered n
        WHERE u.spotify_id = n.spotify_id
    """))

    # 3) Create and set sequence for future inserts
    conn = op.get_bind()
    max_id = conn.execute(sa.text("SELECT MAX(id) FROM users")).scalar() or 0
    conn.execute(sa.text(f"CREATE SEQUENCE users_id_seq START WITH {max_id + 1}"))
    op.execute(sa.text("ALTER TABLE users ALTER COLUMN id SET DEFAULT nextval('users_id_seq')"))

    # 4) Make "id" NOT NULL, swap PK from spotify_id → id
    op.alter_column('users', 'id', nullable=False)
    op.drop_constraint('users_pkey', 'users', type_='primary')
    op.create_primary_key('users_pkey', 'users', ['id'])

    # 5) Create the new creds table
    op.create_table('creds',
        sa.Column('id', sa.Integer(), primary_key=True),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('provider', sa.String(), nullable=False),
        sa.Column('provider_user_id', sa.String(), nullable=False,unique=True),
        sa.Column('refresh_token', sa.String(), nullable=True),
        sa.Column('access_token', sa.String(), nullable=True),
        sa.Column('token_expires_at', sa.DateTime(), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=False, server_default=sa.func.now()),
        sa.Column('updated_at', sa.DateTime(), nullable=False, server_default=sa.func.now()),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'])
    )
    op.create_index(op.f('ix_creds_user_id'), 'creds', ['user_id'], unique=False)
    op.create_index(op.f('ix_creds_provider_user_id'), 'creds', ['provider_user_id'], unique=True)

    # 6) Migrate Spotify data into creds
    op.execute(sa.text("""
        INSERT INTO creds
          (user_id, provider, provider_user_id, refresh_token)
        SELECT
          id              AS user_id,
          'spotify'       AS provider,
          spotify_id      AS provider_user_id,
          refresh_token   AS refresh_token
        FROM users
    """))

    # 7) Update  users
    op.drop_column('users', 'spotify_id')
    op.drop_column('users', 'refresh_token')

    op.add_column('users', sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    op.add_column('users',sa.Column('created_at', sa.DateTime(), 
                  nullable=False, server_default=sa.func.now()))
    op.add_column('users',sa.Column('updated_at', sa.DateTime(),
                  nullable=False, server_default=sa.func.now()))
    
    # op.drop_column('users', 'spotify_id')
    # op.drop_column('users', 'refresh_token')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    
    # ### end Alembic commands ###
